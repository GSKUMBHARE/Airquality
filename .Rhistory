)
testID<- which(fold == i, arr.ind = TRUE)
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed()
cv.gml<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
glm1<- logit(Month ~ Ozone, data = na)
glm.pred <- predict(glm1, test)
cv.est.glm1 <- mean(glm.pred$class !=test$Month)
return(cv.est.glm1)
}
)
cv.glm
trControl <- trainControl(method  = "LOOCV",
number  = 5)
fit <- train(Month ~ .,
method     = "lm"",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
trControl <- trainControl(method  = "LOOCV",
number  = 5)
fit <- train(Month ~ .,
data = na,
method = "lm",
trControl= trControl)
train.control = trainControl(method = "LOOCV")
# Train the model
model.looc = train(Month ~., data = na, method = "lm",trControl = train.control)
# Summarize the results
print(model.looc)
train.control = trainControl(method = "LOOCV")
# Train the model
model.looc = train(Month ~., data = na, method = "lm",trControl = train.control)
# Train the model
model.looc = train(Month ~Ozone, data = na, method = "lm",trControl = train.control)
#knn
library(readx1)
#knn
install.packages("readx1")
library(readx1)
#knn
install.packages("readx1")
library(readx1)
trControl <- trainControl(method  = "LOOCV",
number  = 5)
fit <- train(Month [,1:4]~ .,
data = na,
method = "lm",
trControl= trControl)
fit <- train(na [,1:4]~ .,
na[,5],
method = "lm",
trControl= trControl)
fit <- train(na [,1:4]~ .,
na[,5],
data = na,
method = "lm",
trControl= trControl)
fit <- train(Month [,1:4]~ .,
Month[,5],
data = na,
method = "lm",
trControl= trControl)
fit <- train(Month ~ .,
Month[,5],
data = na,
method = "lm",
trControl= trControl)
trControl <- trainControl(method  = "cv",number  = 5)
> fit <- train(Month ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
> head(fit)
trControl <- trainControl(method  = "cv",
number  = 5)
fit <- train(Month ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
head(fit)
fit
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.gml<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
glm1<- logit(Month ~ Ozone, data = na)
glm.pred <- predict(glm1, test)
cv.est.glm1 <- mean(glm.pred$class !=test$Month)
return(cv.est.glm1)
}
)
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.lda<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
ldaf<- lda(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
lda.pred <- predict(ldaf, test)
cv.est.lda <- mean(lda.pred$class !=test$Month)
return(cv.est.lda)
}
)
cv.lda
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.lda<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
ldaf<- lda(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
lda.pred <- predict(ldaf, test)
cv.est.lda <- mean(lda.pred$class !=test$Month)
return(cv.est.lda)
}
)
cv.lda
mean(cv.lda)
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.gml<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
glm1<- logit(Month ~ Ozone, data = na)
glm.pred <- predict(glm1, test)
cv.est.glm1 <- mean(glm.pred$class !=test$Month)
return(cv.est.glm1)
}
)
cv.glm
mean(cv.glm)
AIC(cv.lda)
AIC("cv.lda")
BIC("cv.lda")
BIC("fit")
BIC(fit)
AIC(na$cv.lda)
AIC(na)
BIC(na)
AIC(cv.lda$na)
AIC(mdl.lda1.p)
AIC(mdl.lda1)
mdl.1da5<-lda(Month ~ Ozone + Solar.R + Wind + Temp, data = na )
mdl.1da5
mdl.lda5.p<-predict(mdl.1da5, newdata = na[,c(1:4)])$class
mdl.lda5.p
AIC(mdl.lda5)
AIC("mdl.lda5")
AIC(log_fit)
AIC(log_fit2)
BIC(mdl.lda5)
summary(mdl.lda5)
summary(mdl.lda5)
mdl.1da5<-lda(Month ~ Ozone + Solar.R + Wind + Temp, data = na )
mdl.1da5
mdl.lda5.p<-predict(mdl.1da5, newdata = na[,c(1:4)])$class
mdl.lda5.p
summary(mdl.lda5)
mdl.1da5
summary(mdl.lda5)
trControl <- trainControl(method  = "cv",
number  = 5)
fit <- train(Month ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
head(fit)
summary(fit)
summary(cv.lda)
summary(mdl.1da5)
library(boot)
glm.fit= Month~ Ozone, data = na)
glm.fit<- glm(Month~ Ozone, data = na)
glm.fit<- glm(Month~ Ozone, data = airquality)
glm.fit<- glm(Ozone~ Temp, data = airquality)
glm.fit<- glm(Ozone~ Temp, data = na)
summary(glm.fit)
cv.error <- cv.glm(na, glm.fit)
names(cv.error)
round(cv.error$delta, 2)
cv.error = rep(0,5)
for (i in 1:5) {
glm.fit = glm(Ozone ~ poly(Temp,i), data=na)
cv.error[i] = round(cv.glm(na, glm.fit)$delta[1],2)
}
cv.error
BIC(fit)
BIC(fit)
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.lda<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
ldaf<- lda(Ozone ~ Temp + Solar.R + Wind + Temp, data = na)
lda.pred <- predict(ldaf, test)
cv.est.lda <- mean(lda.pred$class !=test$Month)
return(cv.est.lda)
}
)
ldaf<- lda(Ozone ~ Temp + Solar.R + Wind + Temp, data = na)
set.seed(7)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model <- train(Month ~ Ozone + Solar.R + Temp + Wind , data = na , method = "lm",
trControl = train.control)
# Summarize the results
print(model)
set.seed()
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model <- train(Month ~ Ozone + Solar.R + Temp + Wind , data = na , method = "lm",
trControl = train.control)
# Summarize the results
print(model)
set.seed(1)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model <- train(Month ~ Ozone + Solar.R + Temp + Wind , data = na , method = "lm",
trControl = train.control)
# Summarize the results
print(model)
set.seed(1)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model1 <- train(Month ~ Ozone + Solar.R + Temp + Wind , data = na , method = "lm",
trControl = train.control)
# Summarize the results
print(model1)
lm(Month~. , data = na)
full <- lm(Month~. , data = na)
full=  lm(Month~. , data = na)
full=  lm(Ozone~. , data = na)
summary(full)
null= lm(Ozone~1, data = na)
add1(null, scope = full, test = "F")
add2(mdl.1da5, scope= full, test= "F")
add1(mdl.1da5, scope= full, test= "F")
AIC(log_fit2)
AIC(log_fit1)
AIC(log_fit_all)
trControl <- trainControl(method  = "cv",
number  = 5)
fit <- train(Month ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
trControl <- trainControl(method  = "cv",
number  = 5)
fit <- train(Month ~ .,
method     = "lm",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
fit <- train.control(Month ~ .,
method     = "lm",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
#knn\
library(caret)
trControl <- trainControl(method  = "cv",
number  = 5)
fit <- train(Month ~ .,
method     = "lm",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
fit <- train(Month ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
head(fit)
fit
set.seed(1)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model1 <- train(Month ~ Ozone + Solar.R + Temp + Wind , data = na , method = "lm",
trControl = train.control)
# Summarize the results
print(model1)
set.seed(1)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
modelkfold <- train(Month ~ Ozone + Solar.R + Temp + Wind , data = na , method = "lm",
trControl = train.control)
# Summarize the results
print(modelkfold)
#kfold
set.seed(1)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
modelkfold <- train(Month ~ Ozone + Solar.R + Temp + Wind , data = na , method = "lm",
trControl = train.control)
# Train the model
modelkfold <- train(Month ~ Ozone + Solar.R + Temp + Wind , data = na , method = "glm",
trControl = train.control)
# Train the model
modelkfold <- train(Month ~ Ozone + Solar.R + Temp + Wind , data = na , method = "knn",
trControl = train.control)
# Summarize the results
print(modelkfold)
#kfold
set.seed(1)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
modelkfold <- train(Ozone ~ Solar.R + Temp + Wind , data = na , method = "knn",
trControl = train.control)
# Summarize the results
print(modelkfold)
# Train the model
modelkfold <- train(Ozone ~ Solar.R + Temp + Wind , data = na , method = "glm",
trControl = train.control)
# Summarize the results
print(modelkfold)
# Train the model
modelkfold <- train(Ozone ~ Solar.R + Temp + Wind , data = na , method = "lm",
trControl = train.control)
# Summarize the results
print(modelkfold)
# Train the model
modelkfold <- train(Ozone ~ Solar.R + Temp + Wind , data = na , method = "logit",
trControl = train.control)
# Train the model
modelkfold <- train(Ozone ~ Solar.R + Temp + Wind , data = na , method = "log",
trControl = train.control)
AIC(modelkfold)
BIC(modelkfold)
# Train the model
modelkfold <- train(Ozone ~ Solar.R + Temp + Wind , data = na , method = "multinom",
trControl = train.control)
glm.fit<- glm(Ozone~ Temp, data = na)
summary(glm.fit)
cv.error <- cv.glm(na, glm.fit)
names(cv.error)
round(cv.error$delta, 2)
cv.error = rep(0,5)
for (i in 1:5) {
glm.fit = glm(Ozone ~ poly(Temp,i), data=na)
cv.error[i] = round(cv.glm(na, glm.fit)$delta[1],2)
}
cv.error
# Summarize the results
print(modelkfold)
accuracy(model1kfold)
modelkfold= lm(Ozone~ Solar.R + Temp + Wind, data = na)
AIC(modelkfold)
BIC(modelkfold)
# Train the model
modelkfold1 <- train(Ozone ~ Solar.R , data = na , method = "lm",
trControl = train.control)
# Summarize the results
print(modelkfold1)
modelkfold1= lm(Ozone~ Solar.R + Temp + Wind, data = na)
AIC(modelkfold1)
BIC(modelkfold1)
# Train the model2
modelkfold2 <- train(Month ~ Ozone , data = na , method = "lm",
trControl = train.control)
# Train the model2
modelkfold2 <- train(Ozone ~  Solar.R + Temp, data = na , method = "lm",
trControl = train.control)
# Summarize the results of mode2 1
print(modelkfold2)
modelkfold2= lm(Ozone~ Solar.R + Temp, data = na)
AIC(modelkfold1)
BIC(modelkfold1)
AIC(modelkfold2)
BIC(modelkfold2)
# Train the model3
modelkfold3 <- train(Ozone ~ Solar.R + Temp + Wind , data = na , method = "lm",
trControl = train.control)
# Summarize the results of model 1
print(modelkfold3)
modelkfold3= lm(Ozone~ Solar.R + Temp + Wind, data = na)
AIC(modelkfold3)
BIC(modelkfold3)
modelkfold1= lm(Ozone~ Solar.R, data = na)
AIC(modelkfold1)
BIC(modelkfold1)
trControl <- trainControl(method  = "cv",
number  = 5)
fit <- train(Month ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
head(fit)
fit <- train(Ozone ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
trControl <- trainControl(method  = "cv",
number  = 5)
fit <- train(Ozone ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
fit <- train(Ozone ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
data       = na)
head(fit)
fit
AIC(fit)
BIC(fit)
fit= knn(Ozone~., data = na)
AIC(fit)
BIC(fit)
fit <- train(Ozone ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
data       = na)
head(fit)
fit
fit= knn(Ozone~., data = na)
AIC(fit)
head(na)
head(airquality)
na
str(na)
load(airquality)
help()
View(airquality)
View(na)
log_fit1=multinom(Month~Temp+Wind, data=na)
print(log_fit1)
BIC(lof_fit1)
BIC(log_fit1)
#We use logistic regression with two predictor
#1.first predictors are Wind and Temp according to month
log_fit1=multinom(Ozone + Month~Temp + Wind, data=na)
#2.Second predictor are Ozone and Solar radiation according to month
log_fit2=multinom(Month~Ozone+Solar.R, data = na)
library(ggthemes)
library(ggplot2)
library(caret)
library(ggiraphExtra)
library(ggplot2)
library(broom)
library(readr)
library(MASS)
library(e1071)
library(nnet)
library(corrplot)
library(tidyverse)
library(car)
library(class)
library(naivebayes)
library(boot)
#2.Second predictor are Ozone and Solar radiation according to month
log_fit2=multinom(Month~Ozone+Solar.R, data = na)
#We use logistic regression with two predictor
#1.first predictors are Wind and Temp according to month
log_fit1=multinom(Ozone + Month~Temp + Wind, data=na)
#2.Second predictor are Ozone and Solar radiation according to month
log_fit2=multinom(Month~Ozone+Solar.R, data = na)
#We use logistic regression with two predictor
#1.first predictors are Wind and Temp according to month
log_fit1=multinom(Ozone + Month~Temp + Wind, data=na)
#summarise cleaned dataset
summary(na)
#we view our dataset
View(airquality)
#understanding data structure
str(airquality)
datasets::airquality
str(na)
help()
library(dataset)
library(help = "datasets")
airquality
Import(datasets = airquality)
