library(e1071)
library(nnet)
library(corrplot)
library(tidyverse)
library(car)
library(class)
#we view our dataset
View(airquality)
#understanding data structure
str(airquality)
#we remove all the N/A values from the dataset
na<- na.omit(airquality)
print(na)
str(na)
#summarise cleaned dataset
summary(na)
#we will split the dataset into subset of 80:20(trainging:validation)
split_data <- createDataPartition(na$Month, p=0.8, list=FALSE)
testset <- na[-split_data,]
trainset <- na[split_data]
#Summarise the training dataset
summary(trainset)
#We plot histogram
ggplot(data = na,mapping =  aes(Ozone))+geom_histogram( bins = 10)
ggplot(data = na,mapping =  aes(Temp))+geom_histogram(bins = 10)
ggplot(data = na,mapping =  aes(Wind))+geom_histogram(bins = 10)
ggplot(data = na,mapping =  aes(Solar.R))+geom_histogram(bins = 10)
#We plot boxplpot
ggplot(data = airquality,mapping =  aes(-1,Ozone))+geom_boxplot()
ggplot(data = airquality,mapping =  aes(-1,Temp))+geom_boxplot()
ggplot(data = airquality,mapping =  aes(-1,Wind))+geom_boxplot()
ggplot(data = airquality,mapping =  aes(-1,Solar.R))+geom_boxplot()
featurePlot(x=na[,1:4], y=na[,5], plot="box", scales=list(x=list(relation="free"), y=list(relation="free")), auto.key=list(columns=3))
#we find correlation between the variables
correlations <- cor(na[,1:5])
corrplot(correlations, method = "circle")
#overall plot
plot(na)
#we convert months variable to charecters
na$Month <- as.character(na$Month)
na$Month[na$Month == "5"] <- "may"
na$Month[na$Month == "6"] <- "june"
na$Month[na$Month == "7"] <- "july"
na$Month[na$Month == "8"] <- "august"
na$Month[na$Month == "9"] <- "september"
na
cor(na[,1:4])
#we will be building some plots using multinomial logistic Regression,
#linear Discriminant Analysis and K-nearest Neighbor
#Losgistic regression
#We use logistic regression with two predictor
#1.first predictors are Wind and Temp according to month
log_fit1=multinom(Month~Temp+Wind, data=na)
print(log_fit1)
#2.Second predictor are Ozone and Solar radiation according to month
log_fit2=multinom(Month~Ozone+Solar.R, data = na)
print(log_fit2)
#3.Next we use model logit with all predictors
log_fit_all=multinom(Month~Ozone+Solar.R+Wind+Temp, data = na)
print(log_fit_all)
#linear Discriminant analysis
#Model LDA1 with one predictor
mdl.1da1<-lda(Month ~ Ozone, data = na )
mdl.1da1
mdl.lda1.p<-predict(mdl.1da1, newdata = na[,c(1,2)])$class
mdl.lda1.p
#determine how well the model fits
table.lda1 <- table(mdl.lda1.p,na[,5])
table.lda1
plot(table.lda1)
#cross validation
data2 <- lda(Month ~ Ozone + Solar.R, data = na, CV = TRUE)
table2 <- table(data2$class, na[,5])
table2
plot(table2)
#fit the model
#set.seed(7)
#fit.knn <- train(Method~Ozone, data=na, method="knn", metric=metric, trControl=control)
#print(fit.knn)
Modelm <- lm(Month~Ozone+ Solar.R+ Temp+ Wind, data = na)
print(Modelm)
#anova
Anova(Modelm)
#Results
#libraries loaded
library(ggthemes)
library(ggplot2)
library(caret)
library(ggiraphExtra)
library(ggplot2)
library(broom)
library(readr)
library(MASS)
library(e1071)
library(nnet)
library(corrplot)
library(tidyverse)
library(car)
library(class)
library(naivebayes)
install.packages("naivebayes")
library(naivebayes)
qplot(Month, Ozone, data = na, geom = "boxplot", color = Month)
qplot(Month, Ozone, data = na, geom = "boxplot", color =Month)
qplot(Month, Ozone, data = na, geom = "boxplot")
dev.off()
qplot(Month, Ozone, data = na, geom = "boxplot")
qplot(Month, Ozone, data = na, geom = "boxplot", color = Month)
qplot(Month, Solar.R, data = na, geom = "boxplot", color = Month)
qplot(Month, Ozone, data = na, geom = "boxplot", color = Month)
qplot(Month, Wind, data = na, geom = "boxplot", color = Month)
qplot(Month, Temp, data = na, geom = "boxplot", color = Month)
qplot(Month, Solar.R, data = na, geom = "boxplot", color = Month)
qplot(Month[,may,june, july, august, september], Ozone, data = na, geom = "boxplot", color = Month)
qplot(Month, Wind, data = na, geom = "boxplot", color = Month)
qplot(Month, Temp, data = na, geom = "boxplot", color = Month)
cor(na[,1:4])
qplot(Month[,may,june, july, august, september], Ozone, data = na, geom = "boxplot", color = Month)
qplot(Month, Solar.R, data = na, geom = "boxplot", color = Month)
qplot(Month[may,june, july, august, september], Ozone, data = na, geom = "boxplot", color = Month)
qplot(Month, Wind, data = na, geom = "boxplot", color = Month)
qplot(Month, Temp, data = na, geom = "boxplot", color = Month)
cor(na[,1:4])
qplot(Month[may,june, july, august, september], Ozone, data = na, geom = "boxplot", color = Month)
qplot(Month(c[may,june, july, august, september]), Ozone, data = na, geom = "boxplot", color = Month)
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(folds)
head(folds)
head(fold)
set.seed(1)
cv.qda<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
qdaf< qda(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
qda.pred <- predict(qdaf, test)
cv.est.qda <- mean(qda.pred$class !=test$Month)
return(cv.est.qda)
}
)
cv.qda
mean(cv.qda)
cv.qda<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
qdaf< qda(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
qda.pred <- predict(qdaf, test)
cv.est.qda <- mean(qda.pred$class !=test$Month)
return(cv.est.qda)
}
)
qdaf<- qda(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
cv.qda<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
qdaf<- qda(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
qda.pred <- predict(qdaf, test)
cv.est.qda <- mean(qda.pred$class !=test$Month)
return(cv.est.qda)
}
)
cv.qda
mean(cv.qda)
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.qda<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
ldaf<- lda(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
lda.pred <- predict(ldaf, test)
cv.est.lda <- mean(lda.pred$class !=test$Month)
return(cv.est.lda)
}
)
cv.lda
mean(cv.lda)
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.lda<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
ldaf<- lda(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
lda.pred <- predict(ldaf, test)
cv.est.lda <- mean(lda.pred$class !=test$Month)
return(cv.est.lda)
}
)
cv.lda
mean(cv.lda)
trControl <- trainControl(method  = "cv",
number  = 5)
fit <- train(Month ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
head(fit)
fit
set.seed(7)
fit.knn <- train(Method~Ozone, data=na, method="knn", metric=metric, trControl=control)
print(fit.knn)
fit.knn <- train(Method~Ozone, data=na, method="knn", metric=metric, trControl=control)
plot(fit)
plot(cv.lda)
plot(cv.qda)
confusionMatrix(table(test$Month, cv.lda))
confusionMatrix(table(test$Month, fit))
trControl <- trainControl(method  = "cv",
number  = 5)
fit <- train(Month ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
head(fit)
fit
confusionMatrix(table(test$Month, fit))
?confusionMatrix
featurePlot(x=na[,1:4], y=na[,5], plot="box", scales=list(x=list(relation="free"), y=list(relation="free")), auto.key=list(columns=3))
set.seed(7)
fit.knn <- train(Method~Ozone, data=na, method="knn", metric=metric, trControl=control)
print(fit.knn)
Modelm <- lm(Month~Ozone+ Solar.R+ Temp+ Wind, data = na)
print(Modelm)
trControl <- trainControl(method  = "cv",
number  = 5)
fit <- train(Month ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
fit
head(fit)
correlations <- cor(na[,1:5])
corrplot(correlations, method = "circle")
#overall plot
plot(na)
cor(na[,1:4])
mdl.1da2<-lda(Month ~ Ozone + Solar.R, data = na )
mdl.1da2
mdl.lda2.p<-predict(mdl.1da2, newdata = na[,c(1,2)])$class
mdl.lda2.p
mdl.1da3<-lda(Month ~ Ozone + Wind, data = na )
mdl.1da3
mdl.lda3.p<-predict(mdl.1da3, newdata = na[,c(1,2)])$class
mdl.lda3.p
mdl.1da3<-lda(Month ~ Ozone + Wind, data = na )
mdl.1da3
mdl.lda3.p<-predict(mdl.1da3, newdata = na[,c(1,3)])$class
mdl.lda3.p
plot(mdl.1da3)
plot(mdl.1da2)
mdl.1da4<-lda(Month ~ Ozone + Temp, data = na )
mdl.1da4
mdl.lda4.p<-predict(mdl.1da4, newdata = na[,c(1,4)])$class
mdl.lda4.p
mdl.1da4<-lda(Month ~ Ozone + Temp, data = na )
mdl.1da4
mdl.lda4.p<-predict(mdl.1da4, newdata = na[,c(1,4)])$class
mdl.lda4.p
mdl.1da5<-lda(Month ~ Ozone + Solar.R, data = na )
mdl.1da5
mdl.lda5.p<-predict(mdl.1da5, newdata = na[,c(1:4)])$class
mdl.lda5.p
mdl.1da5<-lda(Month ~ Ozone + Solar.R + Wind + Temp, data = na )
mdl.1da5
mdl.lda5.p<-predict(mdl.1da5, newdata = na[,c(1:4)])$class
mdl.lda5.p
table.lda1 <- table(mdl.lda1.p,na[,5])
table.lda1
plot(table.lda1)
table.lda5 <- table(mdl.lda5.p,na[,5])
table.lda5
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.gml<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
glm1<- glm(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
glm.pred <- predict(glm1, test)
cv.est.glm1 <- mean(glm.pred$class !=test$Month)
return(cv.est.glm1)
}
)
cv.glm
mean(cv.qda)
mean(cv.glm)
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.gml<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
glm1<- logit(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
glm.pred <- predict(glm1, test)
cv.est.glm1 <- mean(glm.pred$class !=test$Month)
return(cv.est.glm1)
}
)
cv.glm
mean(cv.glm)
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.gml<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
glm1<- logit(Month ~ Ozone, data = na)
glm.pred <- predict(glm1, test)
cv.est.glm1 <- mean(glm.pred$class !=test$Month)
return(cv.est.glm1)
}
)
testID<- which(fold == i, arr.ind = TRUE)
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed()
cv.gml<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
glm1<- logit(Month ~ Ozone, data = na)
glm.pred <- predict(glm1, test)
cv.est.glm1 <- mean(glm.pred$class !=test$Month)
return(cv.est.glm1)
}
)
cv.glm
trControl <- trainControl(method  = "LOOCV",
number  = 5)
fit <- train(Month ~ .,
method     = "lm"",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
trControl <- trainControl(method  = "LOOCV",
number  = 5)
fit <- train(Month ~ .,
data = na,
method = "lm",
trControl= trControl)
train.control = trainControl(method = "LOOCV")
# Train the model
model.looc = train(Month ~., data = na, method = "lm",trControl = train.control)
# Summarize the results
print(model.looc)
train.control = trainControl(method = "LOOCV")
# Train the model
model.looc = train(Month ~., data = na, method = "lm",trControl = train.control)
# Train the model
model.looc = train(Month ~Ozone, data = na, method = "lm",trControl = train.control)
#knn
library(readx1)
#knn
install.packages("readx1")
library(readx1)
#knn
install.packages("readx1")
library(readx1)
trControl <- trainControl(method  = "LOOCV",
number  = 5)
fit <- train(Month [,1:4]~ .,
data = na,
method = "lm",
trControl= trControl)
fit <- train(na [,1:4]~ .,
na[,5],
method = "lm",
trControl= trControl)
fit <- train(na [,1:4]~ .,
na[,5],
data = na,
method = "lm",
trControl= trControl)
fit <- train(Month [,1:4]~ .,
Month[,5],
data = na,
method = "lm",
trControl= trControl)
fit <- train(Month ~ .,
Month[,5],
data = na,
method = "lm",
trControl= trControl)
trControl <- trainControl(method  = "cv",number  = 5)
> fit <- train(Month ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
> head(fit)
trControl <- trainControl(method  = "cv",
number  = 5)
fit <- train(Month ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = na)
head(fit)
fit
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.gml<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
glm1<- logit(Month ~ Ozone, data = na)
glm.pred <- predict(glm1, test)
cv.est.glm1 <- mean(glm.pred$class !=test$Month)
return(cv.est.glm1)
}
)
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.lda<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
ldaf<- lda(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
lda.pred <- predict(ldaf, test)
cv.est.lda <- mean(lda.pred$class !=test$Month)
return(cv.est.lda)
}
)
cv.lda
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.lda<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
ldaf<- lda(Month ~ Ozone + Solar.R + Wind + Temp, data = na)
lda.pred <- predict(ldaf, test)
cv.est.lda <- mean(lda.pred$class !=test$Month)
return(cv.est.lda)
}
)
cv.lda
mean(cv.lda)
K <- 10
fold <- cut(seq(1, nrow(na)), breaks = K, labels = FALSE)
head(fold)
set.seed(1)
cv.gml<-sapply(1:K, FUN = function(i){
testID<- which(fold == i, arr.ind = TRUE)
test <- na[testID, ]
train<- na[-testID, ]
glm1<- logit(Month ~ Ozone, data = na)
glm.pred <- predict(glm1, test)
cv.est.glm1 <- mean(glm.pred$class !=test$Month)
return(cv.est.glm1)
}
)
cv.glm
mean(cv.glm)
AIC(cv.lda)
AIC("cv.lda")
BIC("cv.lda")
BIC("fit")
BIC(fit)
AIC(na$cv.lda)
AIC(na)
BIC(na)
AIC(cv.lda$na)
AIC(mdl.lda1.p)
AIC(mdl.lda1)
mdl.1da5<-lda(Month ~ Ozone + Solar.R + Wind + Temp, data = na )
mdl.1da5
mdl.lda5.p<-predict(mdl.1da5, newdata = na[,c(1:4)])$class
mdl.lda5.p
AIC(mdl.lda5)
AIC("mdl.lda5")
AIC(log_fit)
AIC(log_fit2)
BIC(mdl.lda5)
summary(mdl.lda5)
summary(mdl.lda5)
mdl.1da5<-lda(Month ~ Ozone + Solar.R + Wind + Temp, data = na )
mdl.1da5
mdl.lda5.p<-predict(mdl.1da5, newdata = na[,c(1:4)])$class
mdl.lda5.p
summary(mdl.lda5)
mdl.1da5
summary(mdl.lda5)
